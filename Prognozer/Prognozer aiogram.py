import logging
import aiogram
import functions as function
from os import getenv

# —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = getenv('TOKEN')
bot_creation = aiogram.Bot(token)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dispatcher = aiogram.Dispatcher(bot_creation)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

print('BOT IS ALIVE')


# –í—ã–≤–æ–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dispatcher.message_handler(aiogram.dispatcher.filters.Text(equals='/start'))
async def start(message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç.'
                        f' –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ —Ç–∞–∫ –∂–µ –∫–æ–º–º–∞–Ω–¥—ã,'
                        f' –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —É —Ç–µ–±—è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üôÉ')


# –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dispatcher.message_handler(commands=['keyboard_open'])
async def open_keyboard(message):
    keyboard = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ['üå¶Ô∏è what_weather', '‚ùì help', '‚ùå close_keyboard', 'üìã what_to_do']
    keyboard.add(*buttons)
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞", reply_markup=keyboard)

# –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dispatcher.message_handler(commands=['close_keyboard'])
@dispatcher.message_handler(aiogram.dispatcher.filters.Text(equals="‚ùå close_keyboard"))
async def close_keyboard(message):
    await message.reply("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞", reply_markup=aiogram.types.ReplyKeyboardRemove())


# —ç—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–∏—Ñ–∫–∏
@dispatcher.message_handler(content_types=[aiogram.types.ContentType.ANIMATION])
async def echo_document(message: aiogram.types.Message):
    await message.reply_animation(message.animation.file_id)


@dispatcher.message_handler(commands=['what_weather'])
@dispatcher.message_handler(aiogram.dispatcher.filters.Text(equals='üå¶Ô∏è what_weather'))
async def command_what_weather(message):
    await message.reply(function.command_what_weather())


@dispatcher.message_handler(lambda message: '–ø–æ–≥–æ–¥' in message.text.lower())
async def what_is_weather(message):
    city = function.what_city(message.text.lower())
    if not city:
        wrong_answer = '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ—á–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: –ü–æ–≥–æ–¥–∞ –ì–æ—Ä–æ–¥'
        await message.reply(wrong_answer)
    else:
        weather = function.what_weather(city)
        await message.reply(f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {weather}')

@dispatcher.message_handler(commands=['what_to_do'])
@dispatcher.message_handler(lambda message: message.text.lower() == 'üìã what_to_do')
async def advises_what_to_do(message):
    user_id = message['from']['id']
    doing = function.what_to_do(user_id=user_id)
    await message.reply(f'–ù–µ –∑–Ω–∞–µ—à—å —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è? –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{doing}')
""


# –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞
# –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥  message.reply


@dispatcher.message_handler(content_types=['text'])
async def unknown_message(message: aiogram.types.Message):
    await message.reply(f'–ß—Ç–æ-—Ç–æ —Ç—ã –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–ø–µ—á–∞—Ç–∞–ª. {function.failure_answer()}')
    # await message.reply("Test 1")


def run():
    aiogram.executor.start_polling(dispatcher, skip_updates=True)


if __name__ == "__main__":
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    run()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1 –∏–ª–∏ —Ç–µ–∫—Å—Ç test1
# @dispatcher.message_handler(lambda message: message.text == 'test1') ---–º–æ–∂–Ω–æ —Ç–∞–∫
# –∞ –º–æ–∂–Ω–æ –∏ —Ç–∞–∫:
# @dispatcher.message_handler(aiogram.dispatcher.filters.Text(equals="test1"))
# async def cmd_test1(message: aiogram.types.Message):
#     await message.reply("Test 1")

# –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
# @dp.message_handler(commands="answer")
# async def cmd_answer(message: types.Message):
#     await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
