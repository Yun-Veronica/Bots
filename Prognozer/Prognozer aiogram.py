import logging
from os import getenv
import functions as function
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage


# —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = getenv('TOKEN')
storage = MemoryStorage()
bot_creation = Bot(token)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ dp (Dispatcher)
dispatcher = Dispatcher(bot_creation, storage=storage)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

print('BOT IS ALIVE')


# –í—ã–≤–æ–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dispatcher.message_handler(Text(equals='/start'))
async def start(message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç.'
                        f' –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ —Ç–∞–∫ –∂–µ –∫–æ–º–º–∞–Ω–¥—ã,'
                        f' –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —É —Ç–µ–±—è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üôÉ')


# –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dispatcher.message_handler(commands=['keyboard_open'])
async def open_keyboard(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ['üå¶Ô∏è what_weather', '‚ùì help', '‚ùå close_keyboard', 'üìã what_to_do']
    keyboard.add(*buttons)
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞", reply_markup=keyboard)


# –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dispatcher.message_handler(commands=['close_keyboard'])
@dispatcher.message_handler(Text(equals="‚ùå close_keyboard"))
async def close_keyboard(message):
    await message.reply("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞", reply_markup=types.ReplyKeyboardRemove())


# —ç—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–∏—Ñ–∫–∏
@dispatcher.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)


@dispatcher.message_handler(commands=['what_to_do'])
@dispatcher.message_handler(lambda message: message.text.lower() == 'üìã what_to_do')
async def advises_what_to_do(message):
    user_id = message['from']['id']
    doing = function.what_to_do(user_id=user_id)
    await message.reply(f'–ù–µ –∑–Ω–∞–µ—à—å —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è? –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{doing}')


# FSM –¥–ª—è –∫–æ–º–∞–Ω–¥—ã what_wheather

class CityState(StatesGroup):
    city = State()
    pass


@dispatcher.message_handler(commands=['what_weather'])
@dispatcher.message_handler(Text(equals='üå¶Ô∏è what_weather'))
async def command_what_weather(message: types.Message):
    await message.answer("–ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≥–æ—Ä–æ–¥,–≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")
    await CityState.city.set()


@dispatcher.message_handler(state=CityState.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()
    weather_func_res = function.what_weather(data['city'])
    await message.answer(weather_func_res)
    await state.finish()


# –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞
# –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥  message.reply
# ! –≠—Ç–∞ –∫–æ–º–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π. —Ç–∞–∫ –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –ª–æ–≤–∏—Ç—å –∫–æ–º–º–∞–Ω–¥—ã –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º–∏
@dispatcher.message_handler(content_types=['text'])
async def unknown_message(message: types.Message):
    await message.reply(f'–ß—Ç–æ-—Ç–æ —Ç—ã –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–ø–µ—á–∞—Ç–∞–ª. {function.failure_answer()}')
    # await message.reply("Test 1")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run():
    executor.start_polling(dispatcher, skip_updates=True)


if __name__ == "__main__":
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    run()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1 –∏–ª–∏ —Ç–µ–∫—Å—Ç test1
# @dispatcher.message_handler(lambda message: message.text == 'test1') ---–º–æ–∂–Ω–æ —Ç–∞–∫
# –∞ –º–æ–∂–Ω–æ –∏ —Ç–∞–∫:
# @dispatcher.message_handler(aiogram.dispatcher.filters.Text(equals="test1"))
# async def cmd_test1(message: aiogram.types.Message):
#     await message.reply("Test 1")

# –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
# @dp.message_handler(commands="answer")
# async def cmd_answer(message: types.Message):
#     await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
